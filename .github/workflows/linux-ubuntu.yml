#-----------------------------------------------------------------------------------------------------------------------
# .github/workflows/linux-ubuntu.yml is part of Brewken, and is copyright the following authors 2021-2022:
#   • Artem Martynov <martynov-a@polyplastic.by>
#   • Chris Speck <cgspeck@gmail.com>
#   • Mattias Måhl <mattias@kejsarsten.com>
#   • Matt Young <mfsy@yahoo.com>
#   • Mik Firestone <mikfire@gmail.com>
#
# Brewken is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Brewken is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------------------------------------------------------
name: Linux

on:
  push:
    branches:
      - develop
      - "stable/**"
  pull_request:
    branches:
      - develop
  schedule:
    - cron: "0 2 * * *"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #
        # See https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        # for info on runner images
        #
        # Usually "ubuntu-latest" is the most recent LTS version of Ubuntu, but there can be a bit of lag between a new
        # LTS release and the update of ubuntu-latest (eg in October 2022, it was still Ubuntu 20.04 rather than 22.04).
        # So we explicitly specify here which versions we want to build on.
        #
        os: [ubuntu-20.04, ubuntu-22.04]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      #
      # See https://github.com/Brewken/brewken/wiki/Development:-Getting-Started for more on what is needed to build
      # the software.  It seems we can assume the following packages are already installed:
      #    cmake
      #    git
      #    debhelper
      #    rpm
      #
      # Note that we need CMake even for the Meson build because meson uses CMake as one of its library-finding tools
      #
      # Some of the things below could be installed via actions (jurplel/install-qt-action@v3) but there's an advantage,
      # where we can, in doing the exact same steps that give as instructions to developers to set up their build
      # environment.
      #
      # Note that we need Python 3.10 or newer, which means you can't just use `sudo apt install` on older Ubuntus.  (Eg
      # Ubuntu 18.04 packages have only Python 3.6.7 and Ubuntu 20.04 only have Python 3.8.2.  However Ubuntu 22.04 has
      # Python 3.10.6.)  There are ways to get around this, but, in this context, it's simplest to use a canned GitHub
      # action.
      #
      # Similarly, Ubuntu 20.04 packages only have Meson 0.53.2, and we need 0.56.0 or later.  In this case it means we
      # have to install Meson via pip, which is not ideal on Linux (per comments in meson.build).
      #
      # TODO: The manual installation of Boost below somehow is undetectable by meson (or I'm doing something wrong)
      # UNLESS you have another version of Boost installed via 'sudo apt install'.
      #
      # In theory with Conan:
      # pip3 install conan
      #
      # sudo apt-get install libboost-all-dev
      # export BOOST_INCLUDEDIR=/usr/include
      # export    BOOST_LIBRARYDIR=/usr/lib
      #
      # The manual install of Boost pretty much verbatim follows the instructions at
      # https://www.boost.org/doc/libs/1_80_0/more/getting_started/unix-variants.html.  Note that, we no longer specify
      # the /usr prefix (./bootstrap.sh --prefix=/usr) because it results in Meson being unable to find Boost.
      #    cd ~
      #    mkdir ~/boost-tmp
      #    cd ~/boost-tmp
      #    wget https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.bz2
      #    tar --bzip2 -xf boost_1_80_0.tar.bz2
      #    cd boost_1_80_0
      #    ./bootstrap.sh
      #    sudo ./b2 install
      #    cd ~
      #    sudo rm -rf ~/boost-tmp
      #
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Frameworks and Libraries
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y \
            libqt5multimedia5-plugins \
            libqt5sql5-psql \
            libqt5sql5-sqlite \
            libqt5svg5-dev \
            libxalan-c-dev \
            libxerces-c-dev \
            lintian \
            meson \
            ninja-build \
            python3 \
            qtbase5-dev \
            qtmultimedia5-dev \
            qttools5-dev \
            qttools5-dev-tools \
            rpmlint
          if [[ $(lsb_release -r | awk '{print $2}' | awk -F. '{print $1}') -lt 22 ]]
          then
            sudo apt remove -y meson
            sudo pip3 install meson
          fi
          cd ~
          mkdir ~/boost-tmp
          cd ~/boost-tmp
          wget https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.bz2
          tar --bzip2 -xf boost_1_80_0.tar.bz2
          cd boost_1_80_0
          ./bootstrap.sh
          sudo ./b2 install
          cd ~
          sudo rm -rf ~/boost-tmp
          ls -l /usr/local/lib/libboost_*

      - name: Setup Build Environment (New)
        working-directory: ${{github.workspace}}
        # I'm sure there's a better way to invoke this script, but I haven't yet discovered it
        shell: bash
        run: |
          export BOOST_ROOT=/usr
          ls -l /usr/lib
          python3 bt setup

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          umask 022
          cmake \
            DESTDIR=/usr \
            -DDO_RELEASE_BUILD=ON \
            -DNO_MESSING_WITH_FLAGS=ON \
            $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          pwd
          find ../third-party
          make

      - name: Build (New)
        working-directory: ${{github.workspace}}/mbuild
        shell: bash
        run: |
          pwd
          meson compile

      - name: Test
        working-directory: ${{github.workspace}}/build
        shell: bash
        env:
          CTEST_OUTPUT_ON_FAILURE: TRUE
          QT_QPA_PLATFORM: minimal
        run: |
          make test

      - name: Test (New)
        working-directory: ${{github.workspace}}/mbuild
        shell: bash
        run: |
          meson test

      - name: Package
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          umask 022
          make package

      - name: Package (New)
        working-directory: ${{github.workspace}}/mbuild
        shell: bash
        run: |
          umask 022
          ../bt package

      - name: LintianAndRpmLint
        continue-on-error: true
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: make package_lint

      - name: Upload Linux Packages (Installers)
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: brewken-${{matrix.os}}
          path: |
            build/brewken*.rpm
            build/brewken*.rpm.sha256
            build/brewken*.deb
            build/brewken*.deb.sha256
            build/brewken*.tar.bz2
            build/brewken*.tar.bz2.sha256
          retention-days: 7

      - name: Recover Debris Artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: build-results-${{matrix.os}}
          path: build
          retention-days: 1
